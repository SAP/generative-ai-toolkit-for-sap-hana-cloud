"""
Scenario prompts for the scenario agent
"""

REFINE_RESPONSE = "You are an friendly AI chatbot. Please summarize the system response \"{system_response}\" and refine it in a human readable way to answer the user question \"{query}\"."
GET_TARGET_SCHEMA = "The schemas are listed: {schema_list}. Please find the schema of the table wrapped by opening and closing tag with the tag name schema from the user question: \"{query}\". otherwise, return <schema></schema>."
GET_TARGET_TABLE = "The table names are listed: {table_list}. The user question is \"{query}\". Please find the corresponding table name according to this user question and wrapped by opening and closing tag with the tag name table for {scenario} data. Otherwise, return <table></table>."
GET_DATA_SOURCE_FROM_RESULT = "The calculated results/outputs are listed: {calculated_result}. Please find the table name and the schema name according to the user question \"{query}\". If so, return the table name and the schema name wrapped by opening and closing tag with the tag name schema and table respectively. Otherwise, return <schema></schema> and <table></table>."
CHECK_MODEL_TYPE_CHANGE = "The {scenario} model/function type in the scope: \"{model_types_scope}\". The current model/function type: \"{model_type}\". Please check if the user intends to use another different model/function type for {scenario} from the user question \"{query}\". If the model/function type is updated, then return it wrapped by opening and closing tag with the tag name model_type. Otherwise, return <model_type>{model_type}</model_type>."
GET_FIELDS = "In a machine learning scenario. The user question is \"{query}\". Please find {fields_description} from this user question. If so, return them wrapped by opening and closing tag with the tag name {fields_key} respectively. If the user decides not to use them from the question, then return empty string wrapped by opening and closing tag with the tag name {fields_key} respectively. Otherwise, do not return anything."
SUMMARIZE_HISTORY_CHAT = "Please summarize the message history:\n{history_message}"
ADDITIONAL_CONTEXT = "Scenario type: {scenario_type}, Mandatory fields: {mandatory_fields}, Optional fields: {optional_fields}."
CHECK_SCENARIO_CHANGE = "The {scenario} scenario type is in the scope: {scenario_types_scope}. In our scenario, Scenario type: {scenario_type}. The user question is \"{query}\". Please check if this user question intends to change the scenario type. If the scenario type is updated, then return it wrapped by opening and closing tag with the tag name scenario_type. Otherwise, return <scenario_type>{scenario_type}</scenario_type>."
CHECK_MANDATORY_FIELD_CHANGE = "Please check if this user question intends to change {mandatory_field_description}. If {mandatory_field_description} is updated, then return the updated value wrapped by opening and closing tag with the tag name {mandatory_field_key}. If the user doesn't want to use {mandatory_field_description}, then return <{mandatory_field_key}></{mandatory_field_key}>. Otherwise, return <{mandatory_field_key}>{mandatory_field_value}</{mandatory_field_key}>."
CHECK_DATA_CHANGE = "Currently the {scenario} table: \"{data_table}\". The user question is \"{query}\". Please check if the question intends to switch the current working table \"{data_table}\" to another table in the scenario {scenario}. If so, return the changed working table wrapped by opening and closing tag with the tag name table. Otherwise, return <table></table>."
EXECUTE_CODE = "{additional_context} The user question is \"{query}\". Please refer to the code template: {context}"
EXECUTE_CODE_GENERIC = "Fields\n {fields}. The user question is \"{query}\". Please refer to the code template: {code_template}"
GET_OUTPUTS = "The execution result is {execute_result}. Please find the output table names from the execution result and return them wrapped by opening and closing tag with the tag name output respectively. Please also find the python object address and return it wrapped by opening and closing tag with the tag name python_object_address."
CHECK_COMMAND = "From the user question is \"{query}\", please check if the user asks for {scenario}. If so, return <ans>yes</ans>."
SCENARIO_ROUTER = "The scenario is in the scope: {scenario_scope}. {scenario_description} Current scenario : {scenario}. The user question is \"{query}\". Please check if this user question intends to leave from the current scenario {scenario}. If the scenario is updated, then return it wrapped by opening and closing tag with the tag name scenario. If the scenario is to be updated but the updated scenario is not explicitly mentioned, then return <scenario></scenario>. Otherwise, return <scenario>{scenario}</scenario>."
DATA_SOURCE_ROUTER = "Current scenario : {scenario}. The user question is \"{query}\". Please check if this user question intends to work on the data source from the calculated result/output. If so, return <ans>yes</ans>."
